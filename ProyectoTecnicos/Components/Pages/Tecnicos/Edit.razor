@page "/Tecnico/Edit/{TecnicoId:int}"

@inject TecnicoService tecnicoService
@inject NavigationManager Navigation

@rendermode InteractiveServer

<EditForm Model="Tecnico" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="container card shadow-lg">
        @*Header*@
        <div class="card-header" style="text-align: center;">
            <h3>Editar Tecnicos</h3>
        </div>

        @*Body*@
        <div class="card-body">
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="TecnicoId" class="form-label">T&eacute;cnicoId:</label>
                    <div class="input-group">
                        <div style="width: 40%; height: 1em;">
                            <InputNumber @bind-Value="Tecnico.TecnicoId" class="form-control" style="font-size: 0.8em;" aria-describedby="BotonBuscar" />
                        </div>
                    </div>
                </div>
            </div>

            <div class="mb-3">
                <label for="Nombres" class="form-label">Nombres:</label>
                <InputText @bind-Value="Tecnico.Nombres" class="form-control" />
                <ValidationMessage For="@(() => Tecnico.Nombres)" />
            </div>

            <div class="mb-3">
                <label for="SueldoHora" class="form-label">SueldoHora:</label>
                <InputNumber @bind-Value="Tecnico.SueldoHora" class="form-control" />
                <ValidationMessage For="@(() => Tecnico.SueldoHora)" />
            </div>
        </div>

        @*Footer*@
        <div class="card-footer d-flex justify-content-center mt-3">
            <div class="btn-group">
                <button type="button" class="btn btn-volver bi bi-arrow-return-left" @onclick="Volver">  Volver</button>
                <button type="button" class="btn btn-nuevo bi bi-plus" @onclick="Nuevo"> Nuevo</button>
                <button type="submit" class="btn btn-guardar bi bi-check-lg"> Guardar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int TecnicoId { get; set; }

    public Tecnicos Tecnico { get; set; } = new Tecnicos();
    private bool Existe = false;

    protected override async Task OnInitializedAsync()
    {
        if (TecnicoId != 0)
        {
            await Buscar();
        }
    }

    public void Nuevo()
    {
        Tecnico = new Tecnicos();
        Existe = false;
    }

    public async Task Buscar()
    {
        Existe = false;
        var tecnicoEncontrado = await tecnicoService.Buscar(TecnicoId);

        if (tecnicoEncontrado != null)
        {
            Tecnico = tecnicoEncontrado;
        }
        else
        {
            Nuevo();
        }
    }

    public async Task<bool> Validar()
    {
        var listaTecnicos = await tecnicoService.Listar(t => t.Nombres.ToLower() == Tecnico.Nombres.ToLower() && t.TecnicoId != Tecnico.TecnicoId);
        Existe = listaTecnicos.Any();
        return Existe;
    }

    public async Task Guardar()
    {
        if (await Validar())
        {
            return;
        }

        var guardo = await tecnicoService.Guardar(Tecnico);
        if (guardo)
        {
            Nuevo();
        }
    }

    public void Volver()
    {
        Navigation.NavigateTo("/Tecnico/Index");
    }
}
