@page "/Tecnico/Index"

@inject TecnicoService tecnicoService
@inject TiposTecnicosService tiposTecnicosService
@inject NavigationManager Navigation

@rendermode InteractiveServer

<PageTitle>T&eacute;cnico Index</PageTitle>
<div class="card shadow-lg">
    <div>
        @*Header*@
        <div class="card-header text-center">
            <h3><strong>Listado de T&eacute;cnicos</strong></h3>
        </div>

        <div class="card-body">
            <div class="row mb-3 align-items-end">
                <div class="col-md-3">
                <label for="Filtro" class="form-label">Filtrar por:</label>
                    <InputSelect id="filtro" class="form-select" @bind-Value="filtro">
                        <option value="">Seleccionar</option>
                        <option value="id">ID</option>
                        <option value="Nombres">Nombres</option>
                        <option value="SueldoHora">SueldoHora</option>
                        <option value="Descripcion">Descripci&oacute;n</option>
                    </InputSelect>
                </div>
                <div class="col-md-4">
                    <label for="ValorFiltro" class="form-label">Búsqueda:</label>
                    <div class="input-group">
                        <input @bind="valorFiltro" class="form-control" placeholder="Buscar" />
                        <button @onclick="Buscar" class="btn btn-outline-primary" type="button">
                            <span class="bi bi-search"></span> Buscar
                        </button>
                    </div>
                </div>
                <div class="col-md-3">
                    <button type="button" class="btn btn-outline-primary" @onclick="Restablecer">Restablecer</button>
                </div>
                <div class="col-md-2 text-end">
                    <button type="button" class="btn btn-crear bi bi-clipboard-plus" @onclick="Crear"> Crear</button>
                </div>
            </div>
        </div>

        @*Body*@
        <div class="card-body">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>T&eacute;cnicoId</th>
                        <th>Nombres</th>
                        <th>SueldoHora</th>
                        <th>Tipo de T&eacute;cnico</th>
                        <th>Ver</th>
                        <th>Editar</th>
                        <th>Eliminar</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var tecnicos in Tecnico)
                    {
                        <tr>
                            <td>@tecnicos.TecnicoId</td>
                            <td>@tecnicos.Nombres</td>
                            <td>@tecnicos.SueldoHora</td>
                            <td>@(ListTipos.FirstOrDefault(t => t.TipoId == tecnicos.idTipo)?.Descripcion ?? "N/A")</td>
                            <td><button type="button" class="btn btn-ver bi bi-eye" @onclick="()=>Detalle(tecnicos.TecnicoId)"></button></td>
                            <td><button type="button" class="btn btn-editar bi bi-pencil" @onclick="()=>Editar(tecnicos.TecnicoId)"></button></td>
                            <td><button type="button" class="btn btn-eliminar bi bi-trash" @onclick="()=>Eliminar(tecnicos.TecnicoId)"></button></td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        @*Footer*@
        <div class="card-footer">
            <p><strong>Total de t&eacute;cnicos: @Tecnico.Count()</strong></p>
        </div>
    </div>
</div>

@code {
    public List<Tecnicos> Tecnico = new List<Tecnicos>();
    public List<TiposTecnicos> ListTipos { get; set; } = new List<TiposTecnicos>();
    private string filtro = "Id";
    private string valorFiltro = "";

    protected override async Task OnInitializedAsync()
    {
        Tecnico = await tecnicoService.Listar(t => true);
        ListTipos = await tiposTecnicosService.Listar(t => true);
    }

    public async Task Restablecer()
    {
        filtro = string.Empty;
        valorFiltro = string.Empty;
        Tecnico = await tecnicoService.Listar(t => true);
    }

    private async Task Buscar()
    {
        if (valorFiltro.Trim() != "")
        {
            if (filtro == "id" && int.TryParse(valorFiltro, out int TecnicoId))
            {
                Tecnico = await tecnicoService.Listar(t => t.TecnicoId == TecnicoId);
            }
            else if (filtro == "Nombres")
            {
                Tecnico = await tecnicoService.Listar(t => t.Nombres.ToLower().Contains(valorFiltro.ToLower()));
            }
            else if (filtro == "SueldoHora" && int.TryParse(valorFiltro, out int SueldoHora))
            {
                Tecnico = await tecnicoService.Listar(t => t.SueldoHora == SueldoHora);
            }
            else if (filtro == "Descripcion")
            {
                var descripcion = ListTipos.FirstOrDefault(t => t.Descripcion.Equals(valorFiltro, StringComparison.OrdinalIgnoreCase));
                if (descripcion != null)
                {
                    Tecnico = await tecnicoService.Listar(t => t.idTipo == descripcion.TipoId);
                }
            }
        }
        else
        {
            Tecnico = await tecnicoService.Listar(p => true);
        }
    }

    public void Crear()
    {
        Navigation.NavigateTo("/Tecnico/Create");
    }

    public void Editar(int id)
    {
        Navigation.NavigateTo($"/Tecnico/Edit/{id}");
    }

    public void Detalle(int id)
    {
        Navigation.NavigateTo($"/Tecnico/Detail/{id}");
    }

    public void Eliminar(int id)
    {
        Navigation.NavigateTo($"/Tecnico/Delete/{id}");
    }
}
