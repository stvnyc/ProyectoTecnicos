@page "/TiposTecnicos/Edit/{TipoId:int}"

@inject TiposTecnicosService tiposTecnicosService
@inject NavigationManager Navigation

@rendermode InteractiveServer

<EditForm Model="tiposTecnicos" OnInvalidSubmit="Guardar">
    <DataAnnotationsValidator />

    <Toasts class="p-3" Messages="Mensaje" Placement="ToastsPlacement.TopRight" />
    <div class="card shadol-lg">
        @*Header*@
        <div class="card-header" style="text-align: center;">
            <h3>Editar Tipos de T&eacute;cnicos</h3>
        </div>

        @*Body*@
        <div class="card-body">
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="TipoId" class="form-label">TipoId:</label>
                    <div class="input-group">
                        <div style="width: 40%; height: 1em;">
                            <InputNumber @bind-Value="tiposTecnicos.TipoId" class="form-control" style="font-size: 0.8em;" aria-describedby="BotonBuscar" readonly />
                        </div>
                    </div>
                </div>
            </div>

            <div class="mb-3">
                <label for="Nombres" class="form-label">Descripcion:</label>
                <InputText @bind-Value="tiposTecnicos.Descripcion" class="form-control" />
                <ValidationMessage For="@(() => tiposTecnicos.Descripcion)" />
            </div>
        </div>

        @*Footer*@
        <div class="card-footer d-flex justify-content-center mt-3">
            <div class="btn-group">
                <button type="button" class="btn btn-volver bi bi-arrow-return-left" @onclick="Volver">  Volver</button>
                <button type="button" class="btn btn-nuevo bi bi-plus" @onclick="Nuevo"> Nuevo</button>
                <button type="submit" class="btn btn-guardar bi bi-check-lg"> Guardar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int TipoId { get; set; }

    public TiposTecnicos tiposTecnicos { get; set; } = new TiposTecnicos();
    private bool Existe = false;
    List<ToastMessage> Mensaje = new List<ToastMessage>();

    protected override async Task OnInitializedAsync()
    {
        if (TipoId != 0)
        {
            await Buscar();
        }
    }

    private void MostrarMensaje(ToastType toastType, string mensaje)
    {
        Mensaje.Add(CreateToastMessage(toastType, mensaje));
    }

    private ToastMessage CreateToastMessage(ToastType toastType, string mensaje)
    => new ToastMessage
        {
            Type = toastType,
            Title = "Notificación",
            HelpText = $"{DateTime.Now}",
            Message = mensaje,
        };

    public void Nuevo()
    {
        tiposTecnicos = new TiposTecnicos();
        Existe = false;
    }

    public async Task Buscar()
    {
        Existe = false;
        var tipoTecnicoEncontrado = await tiposTecnicosService.Buscar(TipoId);

        if (tipoTecnicoEncontrado != null)
        {
            tiposTecnicos = tipoTecnicoEncontrado;
        }
        else
        {
            Nuevo();
        }
    }

    public async Task<bool> Validar()
    {
        Existe = await tiposTecnicosService.Existe(tiposTecnicos.Descripcion);
        return !Existe;
    }

    public async Task Guardar()
    {
        if (!await Validar())
        {
            MostrarMensaje(ToastType.Warning, $"Ya existe un tipo con esta Descripción");
            return;
        }

        var guardo = await tiposTecnicosService.Guardar(tiposTecnicos);
        if (guardo)
        {
            MostrarMensaje(ToastType.Success, $"El tipo se ha editado correctamente");
            Nuevo();
        }

    }

    public void Volver()
    {
        Navigation.NavigateTo("/TiposTecnicos/Index");
    }
}
