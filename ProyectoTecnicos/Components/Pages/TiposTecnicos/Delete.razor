@page "/TipoTecnico/Delete/{TipoId:int}"

@inject TiposTecnicosService tiposTecnicosService
@inject NavigationManager Navigation

@rendermode InteractiveServer

<Toasts class="p-3" Messages="Mensaje" Placement="ToastsPlacement.TopRight" />

@if (tiposTecnicos != null)
{
    <div class="card shadow-lg">
        <div class="shadow-header">
            @*Header*@
            <div class="card-header text-center">
                <h3><strong>Eliminar Tipo de T&eacute;cnico</strong></h3>
            </div>
            <div class="card-header text-center">
                <h3 class="text-danger">¿Est&aacute;s seguro de que quieres eliminar este Tipo de T&eacute;cnico?</h3>
            </div>

            @*Body*@
            <div>
                <div>
                    <div class="col-md-14">
                        <div class="card-header">
                            <h3><strong>Datos del Tipo:</strong></h3>
                        </div>
                        <div class="card-body">
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6">
                                        <ul class="list-unstyled">
                                            <li><strong>TipoId:</strong> @tiposTecnicos.TipoId</li>
                                            <li><strong>Descripci&oacute;n:</strong> @tiposTecnicos.Descripcion</li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            @*Footer*@
            <div class="card-footer">
                <button type="button" class="btn btn-volver bi bi-arrow-return-left" @onclick="Volver"> Volver</button>
                <button type="button" class="btn btn-eliminar bi bi-trash" @onclick="EliminarTecnico"> Eliminar</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int TipoId { get; set; }
    public TiposTecnicos? tiposTecnicos { get; set; } = new TiposTecnicos();
    List<ToastMessage> Mensaje = new List<ToastMessage>();

    protected override async Task OnInitializedAsync()
    {
        if (TipoId != 0)
        {
            tiposTecnicos = await tiposTecnicosService.Buscar(TipoId);
        }
    }

    private void MostrarMensaje(ToastType toastType, string mensaje)
    {
        Mensaje.Add(CreateToastMessage(toastType, mensaje));
    }

    private ToastMessage CreateToastMessage(ToastType toastType, string mensaje)
    => new ToastMessage
        {
            Type = toastType,
            Title = "Notificación",
            HelpText = $"{DateTime.Now}",
            Message = mensaje,
        };

    public async Task EliminarTecnico()
    {
        if (TipoId == 0 || tiposTecnicos == null)
        {
            return;
        }

        if (await tiposTecnicosService.Eliminar(TipoId))
        {
            MostrarMensaje(ToastType.Success, $"El tipo {tiposTecnicos.Descripcion} se ha eliminado correctamente");
            await Task.Delay(2000);
            Volver();
        }
        else
            MostrarMensaje(ToastType.Danger, "Se ha producido un error");
    }

    public void Volver()
    {
        Navigation.NavigateTo("/TipoTecnico/Index");
    }
}
