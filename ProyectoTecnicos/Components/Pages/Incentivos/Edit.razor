@page "/Incentivo/Edit/{IncentivoId:int}"

@inject IncentivoService incentivoService
@inject TecnicoService tecnicoService
@inject IJSRuntime jSRuntime
@inject NavigationManager Navigation

@rendermode InteractiveServer

<EditForm Model="Incentivo" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <Toasts class="p-3" Messages="Mensaje" Placement="ToastsPlacement.TopRight" />

    <div class="card shadow-lg">
        <div>
            @*Header*@
            <div class="card-header text-center">
                <h3>Editar Tecnicos</h3>
            </div>

            @*Body*@
            <div class="card-body">
                <div>
                    <div>
                        <label for="IncentivoId" class="form-label">IncentivoId:</label>
                        <div class="input-group">
                            <div class="col-md-5">
                                <InputNumber @bind-Value="Incentivo.IncentivoId" class="form-control" style="font-size: 0.8em;" aria-describedby="BotonBuscar" readonly />
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-5">
                    <label for="Fecha" class="form-label">Fecha:</label>
                    <InputDate @bind-Value="Incentivo.Fecha" class="form-control" />
                    <ValidationMessage For="@(() => Incentivo.Fecha)" />
                </div>

                <div class="col-md-5">
                    <label for="Descripcion" class="form-label">Descripcion:</label>
                    <InputText @bind-Value="Incentivo.Descripcion" class="form-control" />
                    <ValidationMessage For="@(() => Incentivo.Descripcion)" />
                </div>
                
                <div class="col-md-5">
                    <label for="CantidadServicios" class="form-label">Descripcion:</label>
                    <InputText @bind-Value="Incentivo.Descripcion" class="form-control" />
                    <ValidationMessage For="@(() => Incentivo.Descripcion)" />
                </div>

                <div class="col-md-5">
                    <label for="Monto" class="form-label">Monto:</label>
                    <InputNumber @bind-Value="Incentivo.Monto" class="form-control" />
                    <ValidationMessage For="@(() => Incentivo.Monto)" />
                </div>

                <div class="col-md-5">
                    <label class="form-label">Tipo de T&eacute;cnico</label>
                    <div>
                        <div class="row">
                            <div class="input-group">
                                <InputSelect @bind-Value="Incentivo.Tecnicos.TecnicoId" class="form-control">
                                    <option value="0">Seleccione el Tipo de T&eacute;cnico</option>
                                    @foreach (var tecnico in ListTecnicos)
                                    {
                                        <option value="@tecnico.TecnicoId">@tecnico.Nombres</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            @*Footer*@
            <div class="card-footer d-flex justify-content-center mt-3">
                <div class="btn-group">
                    <button type="button" class="btn btn-volver bi bi-arrow-return-left" @onclick="Volver">  Volver</button>
                    <button type="button" class="btn btn-nuevo bi bi-plus" @onclick="Nuevo"> Nuevo</button>
                    <button type="submit" class="btn btn-guardar bi bi-check-lg"> Guardar</button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int IncentivoId { get; set; }
    public Incentivos Incentivo { get; set; } = new Incentivos();
    public List<Incentivos> ListIncentivos { get; set; } = new List<Incentivos>();
    public List<Tecnicos> ListTecnicos { get; set; } = new List<Tecnicos>();
    private bool Existe = false;
    List<ToastMessage> Mensaje = new List<ToastMessage>();

    protected override async Task OnInitializedAsync()
    {
        Incentivo.IncentivoId = IncentivoId;
        Incentivo = await incentivoService.Buscar(Incentivo.IncentivoId);
        ListIncentivos = await incentivoService.Listar(t => true);
        ListTecnicos = await tecnicoService.Listar(t => true);
    }

    private void MostrarMensaje(ToastType toastType, string mensaje)
    {
        Mensaje.Add(CreateToastMessage(toastType, mensaje));
    }

    private ToastMessage CreateToastMessage(ToastType toastType, string mensaje)
    => new ToastMessage
        {
            Type = toastType,
            Title = "Notificación",
            HelpText = $"{DateTime.Now}",
            Message = mensaje,
        };

    public void Nuevo()
    {
        Incentivo = new Incentivos();
        Existe = false;
    }

    public async Task Buscar()
    {
        Existe = false;
        var incentivoEncontrado = await incentivoService.Buscar(IncentivoId);

        if (incentivoEncontrado != null)
        {
            Incentivo = incentivoEncontrado;
        }
        else
        {
            Nuevo();
        }
    }

    public async Task<bool> Validar()
    {
        Existe = await incentivoService.Existe(Incentivo.IncentivoId, Incentivo.Descripcion!);
        return !Existe;
    }

    public async Task Guardar()
    {
        if (!await Validar())
        {
            MostrarMensaje(ToastType.Warning, $"Ya existe un Incentivo con ese nombre");
            return;
        }

        var guardo = await incentivoService.Guardar(Incentivo);
        if (guardo)
        {
            MostrarMensaje(ToastType.Success, $"El Incentivo se ha editado correctamente");
            Nuevo();
        }
    }

    public void Volver()
    {
        Navigation.NavigateTo("/Incentivo/Index");
    }
}