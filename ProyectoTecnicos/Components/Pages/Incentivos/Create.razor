@page "/Incentivo/Create"

@inject IncentivoService incentivoService
@inject TecnicoService tecnicoService
@inject IJSRuntime jSRuntime
@inject NavigationManager Navigation

@rendermode InteractiveServer

<PageTitle>Incentivo Create</PageTitle>
<EditForm Model="Incentivo" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <Toasts class="p-3" Messages="Mensaje" Placement="ToastsPlacement.TopRight" Delay="5000" />

    <div class="card shadow-lg">
        <div>
            @*Header*@
            <div class="card-header text-center">
                <h3><strong>Crear nuevo T&eacute;cnico</strong></h3>
            </div>

            @*Body*@
            <div class="card-body">
                <div>
                    @*ID*@
                    <label class="form-label">IncentivoId</label>
                    <div class="col-md-5">
                        <InputNumber class="form-control" @bind-Value="Incentivo.IncentivoId"></InputNumber>
                    </div>
                </div>

                <div class="col-md-5">
                    @*Nombres*@
                    <label class="form-label">Descripci&oacute;n</label>
                    <InputText class="form-control" @bind-Value="Incentivo.Descripcion"></InputText>
                    <ValidationMessage For="(()=> Incentivo.Descripcion)" />
                </div>
                
                <div class="col-md-5">
                    @*Fecha*@
                    <label class="form-label">Fecha</label>
                    <InputDate class="form-control" @bind-Value="Incentivo.Fecha"></InputDate>
                    <ValidationMessage For="(()=> Incentivo.Fecha)" />
                </div>
                
                <div class="col-md-5">
                    @*Fecha*@
                    <label class="form-label">CantidadServicios</label>
                    <InputNumber class="form-control" @bind-Value="Incentivo.CantidadServicios"></InputNumber>
                    <ValidationMessage For="(()=> Incentivo.CantidadServicios)" />
                </div>

                <div class="col-md-5">
                    @*SueldoHora*@
                    <label class="form-label">Monto</label>
                    <InputNumber class="form-control" @bind-Value="Incentivo.Monto"></InputNumber>
                    <ValidationMessage For="(()=> Incentivo.Monto)" />
                </div>

                <div class="col-md-5">
                    <label class="form-label">Tipo de T&eacute;cnico</label>
                    <div>
                        <div class="row">
                            <div class="input-group">
                                <InputSelect @bind-Value="Incentivo.TecnicoId" class="form-control">
                                    <option value="0">Seleccione el T&eacute;cnico</option>
                                    @foreach (var Tecnico in ListTecnicos)
                                    {
                                        <option value="@Tecnico.TecnicoId">@Tecnico.Nombres</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            @*Footer*@
            <div class="card-footer">
                <button type="button" class="btn btn-volver bi bi-arrow-return-left" @onclick="Volver"> Volver</button>
                <button type="submit" class="btn btn-crear bi bi-clipboard-plus"> Crear</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int IncentivoId { get; set; }
    public Incentivos Incentivo { get; set; } = new Incentivos();
    public List<Incentivos> ListIncentivos { get; set; } = new List<Incentivos>();
    public List<Tecnicos> ListTecnicos { get; set; } = new List<Tecnicos>();
    private bool Existe = false;
    List<ToastMessage> Mensaje = new List<ToastMessage>();

    protected override async Task OnInitializedAsync()
    {
        Incentivo.Fecha = DateTime.Today;
        ListTecnicos = await tecnicoService.Listar(t => true);
    }

    private void MostrarMensaje(ToastType toastType, string mensaje)
    {
        Mensaje.Add(CreateToastMessage(toastType, mensaje));
    }

    private ToastMessage CreateToastMessage(ToastType toastType, string mensaje)
    => new ToastMessage
        {
            Type = toastType,
            Title = "Notificación",
            HelpText = $"{DateTime.Now}",
            Message = mensaje,
            AutoHide = true
        };

    public void Nuevo()
    {
        Incentivo = new Incentivos();
        Existe = false;
    }

    public async Task Guardar()
    {
        if (!await Validar())
        {
            MostrarMensaje(ToastType.Warning, $"Ya existe un Incentivo llamado {Incentivo.Descripcion}");
            return;
        }

        var guardo = await incentivoService.Guardar(Incentivo);
        if (guardo)
        {
            MostrarMensaje(ToastType.Success, $"El Incentivo {Incentivo.Descripcion} se ha creado correctamente");
            Nuevo();
        }
        else
            MostrarMensaje(ToastType.Danger, "Se ha producido un error");
    }

    public async Task Eliminar()
    {
        var eliminado = await incentivoService.Eliminar(Incentivo.IncentivoId);
        Nuevo();
    }

    public async Task<bool> Validar()
    {
        Existe = await incentivoService.Existe(Incentivo.IncentivoId, Incentivo.Descripcion!);
        return !Existe;
    }

    public void Volver()
    {
        Navigation.NavigateTo("/Incentivo/Index");
    }
}
